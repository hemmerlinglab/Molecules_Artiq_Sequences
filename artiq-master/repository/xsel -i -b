import sys
import os
import select
from artiq.experiment import *
from artiq.coredevice.ad9910 import AD9910
from artiq.coredevice.ad53xx import AD53xx
import time
import numpy as np

def print_underflow():
    print('RTIO underflow occured')


 # define ttl pVort being used for pmt test
class DAQ(EnvExperiment):
    def build(self):
         self.setattr_device('core') # need the core for everything
         self.setattr_device('ttl3') # where pulses are being sent in by ttli
         self.setattr_device('scheduler') # necessary to save the data later (following Haffner lab)

#    @kernel
@kernel
    def run_pmt(self):
        self.core.reset()
        self.set_dataset("pmt_counts",[],broadcast=True)
        self.set_dataset("time", [], broadcast=True)
        self.set_dataset("collection duration",[])
        self.core.break_realtime()
        while not self.scheduler.check_pause():
            self.core.break_realtime() #sets "now" to be in the near future (in artiq manual)
            t_count = self.ttl3.gate_rising(self.duration*ms)
            pmt_count = self.ttl3.count(t_count)
            self.append("pmt_counts", pmt_count)
            self.append("pmt_counts_866_off", -1)
    return pmt_counts

      def get_detection_time(self) -> TFloat:
            val = self.p.get_parameter(["PmtReadout", "duration"])["ms"]
            return val

        def get_mode(self) -> TBool:
            val = self.p.get_parameter(["PmtReadout", "pulsed"])
            return val



